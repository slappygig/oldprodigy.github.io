var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

SW.GetClassCodeModalView = SW.AdvancedModalView.extend({
	className: "modal--get-class-code",

	events: function(){
		return _.extend({}, SW.AdvancedModalView.prototype.events, {
	 	});
	},

	// Overrides default
	initialize: function(options) {
		this._super("initialize");
		this.template = $("#advanced-modal-base-template").html();
		this.childView = new SW.GetClassCodeView({model:this.model});
		this.callback = null;
		
		this.listenTo(sw.dispatcher, "get-class-code:existing-username", this.showLoginView);
		this.listenTo(sw.dispatcher, "get-class-code:new-username", this.showRegisterView);
		this.listenTo(sw.dispatcher, "get-class-code:back", this.showUsernameView);
		this.listenTo(sw.dispatcher, "get-class-code:show-code", this.showCodeView);
		this.listenTo(sw.dispatcher, "get-class-code:close", this.close);
	},

	render: function() {
		this._super('render');
		this.toggleBackButton(false);
	},

	renderChild: function() {
		var view = this.childView.render();
		this.$content.html(view);
		this.centerModal();
	},

	back: function() {
		this.showUsernameView();
	},

	showUsernameView: function() {
		this.childView = new SW.GetClassCodeView({model:this.model});
		this.renderChild();	
		this.toggleBackButton(false);

	},

	showLoginView: function() {
		this.childView = new SW.LoginForClassCodeView({model:this.model});
		this.renderChild();
		this.toggleBackButton(true);

	},

	showRegisterView: function() {
		this.childView = new SW.RegisterForClassCodeView({model:this.model});
		this.renderChild();
		this.toggleBackButton(true);

	},

	showCodeView: function() {
		this.childView = new SW.DisplayClassCodeView({model:this.model});
		this.renderChild();
		this.toggleBackButton(false);
	},

	beforeClose: function() {
		if(_.isFunction(this.callback)) {
			this.callback(this.model.get('classCode'));
		}
	}

});
SW.GetClassCodeView = SW.ModalContentView.extend({
	events: { 
			"submit #class-code-username-form" : "submitUsername"
	},

	// Overrides default
	initialize: function(options) {
		this._super("initialize");
	},

	initInputs: function(){
		var that = this;

		this.$username = this.$el.find("#class-code-username");
		this.inputs = {
			username: { 
				$el: this.$username,
				$label: this.$el.find("#class-code-username__label"),
				$errorLabel: this.$el.find("#class-code-username__label--error"),
				isValid: undefined, 	
				errorMsg: "Please enter a valid email address"
			}
		};

		_.defer(function() {
			that.$username.focus();
			that.$username.select();
		});
	},

	// Overrides default
	render: function(){
		var template = Handlebars.compile($("#class-code-username-template").html());
		var context = this.model.toJSON();
		html = template(context);

		this.$el.html(html);
		this.initInputs();
		return this.$el;
	},

	validateUsername: function(username) {
		if(SW.Validate.email(username, false)) {
			return {success: true};
		}
		else {
			return {success: false};
		}
	},

	submitUsername: function(event) {
		var username = $('#class-code-username').val();
		var validation = this.validateUsername(username);

		if(validation.success) {
			this.processUsername(username);
			this.removeInputWarning("username");
		}
		else {
			this.renderInputWarning("username");
		}

		return false;
	},

	processUsername: function(username) {
		var that = this;
		this.addModalSpinner();
		this.model.set('username', username);
		that.$username.blur();

		//add spinner
		$.ajax({
			type: "POST",
			url: '/Includes/Server/Routers/User.php',
			dataType:'json',
			data: {
				'method': 'username-is-teacher',
				'username': username
			},
			success: function(data) {
				that.removeModalSpinner();
				if(data.success) {
					sw.dispatcher.trigger("get-class-code:existing-username");
				}
				else if(data.exists) {
					that.$username.focus();
					alert("That username belongs to a parent account. Only teacher accounts have class codes.'");
				}
				else {
					that.$username.focus();
					sw.dispatcher.trigger("get-class-code:new-username");
				}
			}
		});
	}


});
SW.LoginForClassCodeView = SW.ModalContentView.extend({
	events: { 
			"submit #class-code-login-form" : "submitLogin",
			"click .js-class-code" : "chooseClassCode"
	},

	// Overrides default
	initialize: function(options) {
		this._super("initialize");
	},

	// Overrides default
	render: function(){
		var template = Handlebars.compile($("#class-code-login-template").html());
		var context = this.model.toJSON();
		html = template(context);

		this.$el.html(html);

		this.initInputs();
		return this.$el;
	},

	initInputs: function(){
		var that = this;

		this.$password = this.$el.find('#class-code-login-password');
		this.inputs = {
			password: { 
				$el: this.$password,
				$label: this.$el.find("#class-code-login-password-label"),
				$errorLabel: this.$el.find("#class-code-login-password-label--error"),
				isValid: undefined, 	
				errorMsg: "Your password is incorrect for that email."
			}
		};


		_.defer(function() {
			that.$password.focus();
		});
	},

	chooseClassCode: function(event) {
		this.model.set("classCode", "ABCDEFG");
		this.close();
	},

	submitLogin: function(event) {
		var that = this;
		var username = this.model.get('username');
		var password = $('#class-code-login-password').val();
		this.addModalSpinner();
		this.removeInputWarning("password");
		this.$password.blur();

		$.ajax({
			type: "POST",
			url: '/Includes/Server/Routers/User.php',
			dataType:'json',
			data: {
				'method': 'get-class-code-from-credentials',
				'username': username,
				'password': password
			},
			success: function(data) {
				that.removeModalSpinner();
				if(data.success) {
					that.model.set('classes', data.classes);
					that.model.set('newAccount', false);
					sw.dispatcher.trigger("get-class-code:show-code");
				}
				else {
					that.renderInputWarning("password");
					that.$password.focus();
					that.$password.select();
				}
			}
		});

		return false;
	}
});

SW.RegisterForClassCodeView = SW.ModalContentView.extend({
	events: { 
			"submit #class-code-register-form" : "submitRegister"
	},

	// Overrides default
	initialize: function(options) {
		this._super("initialize");
	},

	// Overrides default
	render: function(){
		var template = Handlebars.compile($("#class-code-register-template").html());
		var context = this.model.toJSON();
		html = template(context);

		this.$el.html(html);
		this.initInputs();

		return this.$el;
	},

	initInputs: function() {
		var that = this;
		this.$name = this.$el.find("#class-code-register-name");
		this.$password = this.$el.find("#class-code-register-password");
		this.$emailConsent = this.$el.find("#class-code-register-email-consent");

		_.defer(function() {
			that.$name.focus();
		});
	},

	submitRegister: function(event) {
		event.preventDefault();
		

		var that = this;

		this.$name.blur();
		this.$password.blur();
		var username = this.model.get('username');
		var password = this.$password.val();
		var name = this.$name.val();
		var emailConsent = this.$emailConsent.is(':checked');
		this.addModalSpinner();

		$.ajax({
			type: "POST",
			url: '/Includes/Server/Routers/User.php',
			dataType:'json',
			data: {
				'method': 'register-for-class-code',
				'username': username,
				'password': password,
				'emailConsent': emailConsent,
				'name': name
			},
			success: function(data) {
				that.removeModalSpinner();
				if(data.success) {
					that.model.set('classCode', data.classCode);
					that.model.set('newAccount', true);
					sw.dispatcher.trigger("get-class-code:show-code");
				}
				else {
					alert("That email is already in use. Please try a different email.");
				}
			}
		});

		return false;
	},
});

SW.DisplayClassCodeView = SW.ModalContentView.extend({
	events: { 
			"click #class-code-display-close" : "closeModal",
			"click .js-class-code" : "chooseClassCode",
	},

	// Overrides default
	initialize: function(options) {
		this._super("initialize");
	},

	// Overrides default
	render: function(){
		var template = Handlebars.compile($("#class-code-display-template").html());
		var context = this.model.toJSON();
		html = template(context);

		this.$el.html(html);

		return this.$el;
	},

	chooseClassCode: function(event) {
		this.model.set("classCode", $(event.currentTarget).data("class-code"));
		this.closeModal();
	},

	closeModal: function() {
		sw.dispatcher.trigger("get-class-code:close");
	}
});
SW.GetClassCodeModal = SW.AdvancedModal.extend({
	defaults: {
		controls: {},
		newAccount: false
	},

	initialize: function(){
		this.get('controls').close = true;
		this.get('controls').back = true;
	}
});
SW.AppleInstallPromptView = SW.ParentView.extend({
	initialize: function() {
		var that = this,
			iosVersion = SW.Device.getIOSVersion();

		if(SW.Utility.getUrlVar("iosTest")) {
			alert(SW.Device.isLargeResolutionIpad()+" "+iosVersion+" "+this.onCooldown()+" "+SW.Device.isIOSApp()+" "+prodigyWeb.isCanada);

		}

		if(SW.Device.isLargeResolutionIpad() && iosVersion >= 8 && !this.onCooldown() && !SW.Device.isIOSApp()) {
			

			this.render();

			$('.js-ios-install-prompt-close').click(function() {
				that.close();
			});

			$('.js-ios-install-prompt-link').click(function() {
				that.openAppStore();
			});
		}


		
	},

	onCooldown: function() {
		var cooldown = SW.Cookie.get('iosAppPromptCooldown');
		return cooldown;
	},

	setCooldown: function() {
        SW.Cookie.set('iosAppPromptCooldown', true, 7);

	},

	render: function() {
		$('#ios-install-prompt').removeClass("gone");
	},

	openAppStore: function() {
		if(typeof _gaq != "undefined") {
			_gaq.push(['_trackEvent', 'ios-app-prompt', 'success']);
		}

		location.href = "http://web.archive.org/web/20170106231709/https://geo.itunes.apple.com/ca/app/prodigy-math-game/id950795722?mt=8";
	},

	close: function() {
		this.setCooldown();
		$('#ios-install-prompt').remove();

		if(typeof _gaq != "undefined") {
			_gaq.push(['_trackEvent', 'ios-app-prompt', 'closed']);
		}
	}
});
SW.ChromeInstallPromptView = SW.ParentView.extend({
	initialize: function() {
        if(this.shouldShowPrompt()) {
        	if(typeof _gaq != "undefined") _gaq.push(['_trackEvent', 'chrome-app-prompt', 'open']);
			this.render();            
            this.createEvents();
        }
	},

	shouldShowPrompt: function() {
		var alreadyPromptedRecently = SW.Cookie.get('chromeAppPromptCooldown'); //check if we have already prompted recently

		if(window.chrome && window.chrome.app && !window.chrome.app.isInstalled && !alreadyPromptedRecently && !SW.Device.isEdge()) {
			return true;
		}

		return false;
	},

	render: function() {
        $('#add-to-chrome-bar').removeClass("gone");
	},

	createEvents: function() {
		$('#add-to-chrome-button').click(this.startInstall);

        $('.js-notice-bar-close').click(function() {
            //set cookie to remind us later
            SW.Cookie.set('chromeAppPromptCooldown', true, 7);
            if(typeof _gaq != "undefined") _gaq.push(['_trackEvent', 'chrome-app-prompt', 'closed']);
        });
	},

	startInstall: function() {
		chrome.webstore.install(undefined, 
            function() {
                $('#add-to-chrome-bar').remove();
                if(typeof _gaq != "undefined") _gaq.push(['_trackEvent', 'chrome-app-prompt', 'installed']);
            },
            function(error) {
                if(typeof _gaq != "undefined") _gaq.push(['_trackEvent', 'chrome-app-prompt', 'failed']);
                console.log(error);
            }
        );
	}

});
SW.ToyUnlockView = SW.ParentView.extend({
	initialize: function() {
		var self = this;


		$(".js-toy-close").click(function() {
			self.closePage();
		});
		
		$("#toy-unlock__input").keyup(function() {
			self.removeError();
		});

		$("#toy-unlock-form").submit(function(e) {
			e.preventDefault();
			self.submit();
		});

		this.listenTo(this.model, "submit:error", this.handleError);
		this.listenTo(this.model, "submit:loading", this.setLoading);
		this.listenTo(this.model, "submit:success", this.handleSuccess);

		this.submittedCode = "";
	},

	submit: function() {
		var studentID = window.parent.prodigyWeb.page.data.studentID,
			token = window.parent.prodigyWeb.page.data.token,
			uniqueCode = $("#toy-unlock__input").val();

		this.submittedCode = uniqueCode;

		this.model.submit(studentID, token, uniqueCode);
	},

	setLoading: function() {
		$("#toy-unlock__submit").html("Verifying code...");
		$("#toy-unlock__submit").prop('disabled', true);
	},

	stopLoading: function() {
		$("#toy-unlock__submit").html("Unlock Big Hex");
		$("#toy-unlock__submit").prop('disabled', false);

	},

	removeError: function() {
		if($("#toy-unlock__input").val() !== this.submittedCode) {
			$("#toy-unlock__label").removeClass("text-danger");
			$("#toy-unlock__error").html("");
		}
	},

	handleError: function(error) {
		$("#toy-unlock__label").addClass("text-danger");
		$("#toy-unlock__error").html(" - "+error);

		this.stopLoading();
	},

	handleSuccess: function() {
		this.stopLoading();
		this.closePage();
	},

	closePage: function() {
		if(_.isFunction(window.parent.prodigyWeb.page.close)){
			window.parent.prodigyWeb.page.close(this.model.get("unlockResult"));
		}

		this.close();
	}

});
SW.ToyUnlock = SW.Model.extend({

	defaults: {
		unlockResult: {success:false},
	},

	submit: function(studentID, token, uniqueCode) {
		console.log("submitting", studentID, token, uniqueCode);
		if(uniqueCode.length !== 7) {
			return this.trigger("submit:error", "Your code needs to be 7 characters");
		}

		this.trigger("submit:loading");

		SW.Http.fetch({
			url: sw.config.api.toy+"/v1/users/"+studentID+"/toy",
			method: "POST",
			data: {
				uniqueCode: uniqueCode,
				token: token,
				"auth-key": token
			},
			success: function(data){
				sw.track.event("unlock-hex", "submit-success");
				this.set("unlockResult", data);
				this.trigger("submit:success");
			}.bind(this),
			error: function(response){
				if(response.status == 409) {
					sw.track.event("unlock-hex", "submit-error", "409");
					this.trigger("submit:error", "Your session has expired. Please refresh the page and try again.");
				}
				else {
					sw.track.event("unlock-hex", "submit-error", "404");
					this.trigger("submit:error", "Whoops, that code is invalid or has already been used!");
				}
			}.bind(this)
		});
	}
});

}
/*
     FILE ARCHIVED ON 23:17:09 Jan 06, 2017 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 22:23:00 Jun 22, 2020.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 558.377
  PetaboxLoader3.resolve: 185.502 (2)
  exclusion.robots.policy: 0.192
  PetaboxLoader3.datanode: 374.075 (4)
  exclusion.robots: 0.208
  load_resource: 188.447
  esindex: 0.016
  LoadShardBlock: 514.57 (3)
  RedisCDXSource: 23.639
  CDXLines.iter: 16.314 (3)
*/